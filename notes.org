#+title: Notes
#+author: Artin Ghasivand

* TODO To Learn about [1/5]
** DONE Types [0/0]
*** OccName
occNameSpace :: [[NameSpace]]
occNameFs    :: FastString
*** NameSpace
VarName
Dataname
TvName
TcClsname
*** NameSort
External Module (Maybe Name)
WiredIn Module (Maybe Name) TyThing BuiltInSyntax
Internal
System

*** Name
n_sort   :: [[NameSort]]
n_occ    :: [[OccName]]
n_unique :: Int#
n_loc    :: [[SrcLoc]]
*** Unique
*** UniqFM
*** OccEnv
[[UniqFM]] of [[OccName]]
*** Parent
Parent of a data contructor is its data type
Parent of a record selector is its data type
Parent of a class operation is its class

important stuff:
    - [[Name]]
#+begin_src haskell
data Parent = NoParent
            | ParentIs {par_is :: Name}
#+end_src
*** NameCache
*** GlobalRdrElt
Global reader element. An element of the GlobalRdrEnv
important stuff:
    - [[Parent]]
    - [[GreName]]

#+begin_src haskell
GRE { gre_name :: [[GreName]]
    , gre_par  :: Parent
    , gre_lcl  :: Bool
    , gre_imp  :: Bag ImportSpec }
#+end_src
*** GlobalRdrEnv
Important stuff:
- [[GlobalRdrElt]]
- [[OccEnv]]
#+begin_src haskell
type GobalRdrEnv = OccEnv [GlobalRdrElt]
#+end_src
*** GreName
Important stuff:
    - [[Name]]
    - [[Fieldlabel]]
#+begin_src haskell
data GreName = NormalGreName Name
             | FieldGrename FieldLabel
#+end_src
*** LocalRdrEnv
used to keep track of local scopes: where, let, lambda, case

important stuff:
    - [[NameSet]]
    - [[OccEnv]]
    - [[Name]]
#+begin_src haskell
data LocalRdrEnv = LRE { lre_env :: OccEnv Name
                       , lre_in_scope :: NameSet }
#+end_src
*** SrcLoc
location in the source
*** ModuleName
*** FieldLabel
fields in algebraic record types.
important stuff:
    - [[Name]]
    - [[FieldSelectors]]
#+begin_src haskell

#+end_src
*** DynFlags
*** NameMaker
*** ModSummary
*** HsModule
*** LHsDecl
*** Located
*** Uses
*** Defs
*** DefUses
*** UniqSet
*** Usage
*** HsLocalBindsLR - HsLocalBinds - LHsLocalBinds
*** HsValBinds
#+begin_src

#+end_src
*** HsBindLR
haskell binding with seperate left and right id's
#+begin_src haskell
data HsBindLR idL idR = FunBind ...
                      | PatBind ...
                      | VarBind ...
#+end_src
*** TyThing
*** Bag
Bag: an unordered collection with duplicates
#+begin_src haskell
data Bag a
  = EmptyBag
  | UnitBag a
  | TwoBags (Bag a) (Bag a) -- INVARIANT: neither branch is empty
  | ListBag [a]             -- INVARIANT: the list is non-empty
  deriving (Functor)
#+end_src
*** TcGblEnv
TcGblEnv describes the top-level of the module at the point at which the typechecker is finished work.

important fields:
**** tcg_dus
Records what is defined in this module and what is used
**** tcg_used_gres
Records occurences of imported entities
**** tcg_keep

** TODO Functions [17/17]
+ [X] x_set
+ [X] hscTypeCheckRename
+ [X] typecheckModule
+ [X] parseModule
+ [X] hsc_typcheckandRename
+ [X] applyNameMaker
+ [X] mkUnboundName
+ [X] mkUnboundNameRdr
+ [X] showAstData
+ [X] nameIsLocalOrFrom
+ [X] nameModule_maybe
+ [X] getSrcLoc
+ [X] pprDefindAt
+ [X] nameSrcLoc
+ [X] getOccString
+ [X] getMangledName

** TODO Type classes [0/2]
+ [ ] HasOccName

*** Algorithm
1. use Entity to find the GlobalRdrElt
2. traverse HsGroup to find the correspnding function or value binding in it
3. build a Rose-tree
4. go one level deeper in HsGroup
5. lookup all the gathered Names of our bindings in our located HsValBinds
6. recurse
** TODO Typechecker [5/51]
+ [ ] tcRnSrcDecls
+ [ ] ModuleSet
+ [ ] tcRnModule
+ [ ] tcRnModuleTcRnM
+ [ ] rnTopSrcDecls
+ [ ] tcTopSrcDecls
+ [X] [[TcGblEnv]]
+ [ ] addTopDecls
+ [ ] tcTyAndClassDecls
+ [ ] tcInstanceDecls1
+ [ ] tcForeignImports
+ [ ] tcDefaults
+ [ ] tcTopBinds
+ [ ] kcTyClDecls
+ [ ] [[TyThing]]
+ [ ] instOverloadedFun
+ [ ] TcRn
+ [ ] NameEnv
+ [ ] TypeEnv
+ [ ] TcTyThing
+ [ ] UsageEnv
+ [ ] TcLclEnv
+ [ ] [[DefUses]]
+ [ ] [[NameSet]]
+ [ ] RhsNames
+ [ ] EvBind
+ [ ] tcg_binds
+ [ ] tcLookupGlobal
+ [ ] tcRnImports
+ [ ] ModGuts
+ [X] tcg_keep
+ [X] tcg_dus
+ [ ] tcg_used_gres
+ [X] tcg_th_used
+ [X] reportUnusedNames
+ [ ] mkUsedNames
+ [ ] pickGREs
+ [ ] Bag
+ [ ] mkDependencies
+ [ ] extendGlobalRdrEnvRn
+ [ ] getLocalNonValBinders
+ [ ] rnTopBindsBoot
+ [ ] addTcgDUs
+ [ ] rnSrcDecls
+ [ ] MinFixityTyEnv
+ [ ] collectHSIdBinders
+ [ ] getLocalNonValBinders
+ [ ] rnTopBindsLHS
+ [ ] rnValBindsRHS
+ [ ] rnTopBindsBoot
** TODO Source Notes [0/6]
+ [ ] Identity versus semantic module
+ [ ] Tracking unused binding and imports
+ [ ] The Global-Env/Local-Env story
+ [ ] SrcSpan for binders
+ [ ] restoreLclEnv vs SetLclEnv
+ [ ] Deterministic UniqFM

* TODO GHC conventions
** Strict Annotation
The reason we might sometimes have proper data constructors with their parameter being strict is that they might, in some passes, \beta-reduce to DataConCantHappen and being strict helps the pattern matching analyzer to realize we don't need to pattern match over those constructors

example:

** Extensions

* TODO Implementation details [0/0]
- converting 'Entity' to 'GlobalRdrElt' is redundant and instead, I should try to find the closest 'GlobalRdrElt' corresponding to the 'Entity'

** checking to see if the module is in the packages or defined by the user
- Doing while loading the module
- Filtering after the GlobalRdrEnv is constructed.
** Moand stack idea

* TODO Running a computation inside GHC using CPS
